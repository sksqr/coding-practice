package com.practice.tree;

import java.sql.ClientInfoStatus;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;


/*
Input 1:

    3
   / \
  9  20
    /  \
   15   7

   3 9 20 -1 -1 15 7
 */

public class LeastCommonAncestor {

  List<Integer> firstPath = new ArrayList<>();

  List<Integer> secondPath = new ArrayList<>();

  public static int lca(TreeNode A, int B, int C) {
    List<List<Integer>> paths =  getPathByBFS(A,B,C);   //getPath(A,B,new ArrayList<>());
    List<Integer> path1 =  paths.get(0) ;
    List<Integer> path2 =  paths.get(1) ;      //getPath(A,C,new ArrayList<>());
    int i=path1.size()-1;
    int j=path2.size()-1;
    while (i>=0 && j>=0 && path1.get(i)==path2.get(j)){
      i--;
      j--;
    }
    if(i<path1.size()-1){
      return path1.get(i+1);
    }
    return 0;
  }

  public static void main(String[] args) {

    TreeNode node1 = new TreeNode(3);
    TreeNode node2 = new TreeNode(9);
    TreeNode node3 = new TreeNode(20);
    TreeNode node4 = new TreeNode(15);
    TreeNode node5 = new TreeNode(7);


    node1.left=node2;
    node1.right=node3;

    node3.left=node4;
    node3.right=node5;
/*
73
15 20
34 35 5 14
 */
    TreeNode root = getTree("73 15 20 34 35 5 14 16 26 -1 25 23 -1 30 3 36 -1 -1 7 24 11 32 -1 -1 21 -1 -1 -1 29 4 9 -1 33 13 -1 -1 -1 -1 22 31 -1 27 19 1 -1 12 18 6 -1 -1 -1 2 -1 -1 -1 -1 10 -1 -1 -1 -1 8 -1 28 -1 -1 -1 -1 -1 17 -1 -1 -1 -1");

    int count = getLCA(root,33,5);
    System.out.println(lca.val);

//    List<Integer> path = getPath(node1,15,new ArrayList<>());
//    System.out.println(lca(node1,15,7));

  }

  private static List<Integer>  getPath (TreeNode A, int B, List<Integer> path){
    if(A==null){
      return path;
    }
    if(A.val==B){
      path.add(A.val);
      return path;
    }
    if(A.left != null){
      List<Integer> leftPath = getPath(A.left,B,path);
      if(!leftPath.isEmpty()){
        if(leftPath.get(0)==B){
          leftPath.add(A.val);
          return leftPath;
        }
      }
    }
    if(A.right != null){
      List<Integer> rightPath = getPath(A.right,B,path);
      if(!rightPath.isEmpty()){
        if(rightPath.get(0)==B){
          rightPath.add(A.val);
          return rightPath;
        }
      }
    }
    return path;
  }

  private static List<List<Integer>>  getPathByBFS (TreeNode A, int B, int C){
    Queue<TreeNode> queue = new LinkedList<>();
    Map<TreeNode,TreeNode> parentMap = new HashMap<>();
    List<Integer> path1 = new ArrayList<>();
    List<Integer> path2 = new ArrayList<>();
    queue.add(A);
    TreeNode firstNode =null;
    TreeNode secondNode =null;
    int count = 2;
    while (!queue.isEmpty()){
      TreeNode node = queue.poll();
      if(node.val==B){
        firstNode=node;
        count--;
      }
      if(node.val==C){
        secondNode=node;
        count--;
      }
      if(count==0){
        break;
      }
      if(node.left != null){
        parentMap.put(node.left, node);
        queue.add(node.left);
      }
      if(node.right != null){
        parentMap.put(node.right, node);
        queue.add(node.right);
      }
    }
    if(count==0){
      while (firstNode!=null){
        path1.add(firstNode.val);
        firstNode=parentMap.get(firstNode);
      }
      while (secondNode!=null){
        path2.add(secondNode.val);
        secondNode=parentMap.get(secondNode);
      }
    }
    List<List<Integer>> paths = new ArrayList<>();
    paths.add(path1);
    paths.add(path2);
    return paths;

  }

  private static TreeNode lca=null;

  private static int getLCA(TreeNode A, int B, int C){
    if(A==null){
      return 0;
    }
    int count=0;
    if(A.val==B || A.val==C){
      count++;
    }
    if(A.left!=null){
      count += getLCA(A.left,B,C);
    }
    if(A.right!=null){
      count += getLCA(A.right,B,C);
    }
    if(count==2 && lca==null){
      lca = A;
    }
    return count;
  }




  public static TreeNode getTree(String input){
    String[] values = input.split(" ");
    Queue<TreeNode> queue = new LinkedList<>();
    TreeNode root = new TreeNode(Integer.valueOf(values[0]));
    queue.add(root);
    for(int i=1;i<values.length-1; i=i+2){
      TreeNode newNode1 = null;
      TreeNode newNode2 = null;
      if(!"-1".equals(values[i])){
        newNode1 = new TreeNode(Integer.valueOf(values[i]));
      }
      if(!"-1".equals(values[i+1])){
        newNode2 = new TreeNode(Integer.valueOf(values[i+1]));
      }
      if(!queue.isEmpty()){
        TreeNode node = queue.poll();
        if(node!=null){
          node.left=newNode1;
          node.right=newNode2;
        }
      }
      queue.add(newNode1);
      queue.add(newNode2);
    }
    return root;
  }


}
/*
319417 156383 54161 49144 74250 16928 1327 9056 129813 145632 8012 60801 135610 91465 112639 59150 3865 67755 66972 17276 67844 154327 64159 98900 68935 90474 115071 1810 64929 97231 5105 12213 26241 119096 125855 104947 153100 141678 103050 147571 106569 26048 86231 108445 134380 77802 72292 132704 24468 13807 5835 143586 38514 33836 8474 37926 108147 104156 75941 28543 114838 81375 70953 62949 95603 99047 26786 19837 140338 25400 54612 32043 14504 154930 118633 85365 102177 107609 22306 56682 52013 11798 89595 12465 88701 137113 56544 109661 106716 90425 115775 117274 47542 120031 23305 118323 61825 122033 17087 107285 5821 1056 63839 96292 124985 46896 13677 154884 106995 88331 55233 145941 12456 128126 122473 101270 2399 150487 91409 48068 49748 105417 78895 10229 15304 94765 133630 120594 36809 46747 94271 57825 49197 87823 121085 14924 34469 51518 150041 -1 85463 45588 132968 112249 98058 101356 8666 107924 91372 28875 91262 110955 119432 144151 42909 24326 64832 133149 21276 119653 70534 140246 -1 75414 91721 648 4482 75934 75521 99837 68181 102236 84523 30069 64550 153731 79477 44246 78912 84364 76320 14810 148453 154473 155149 91624 67271 93357 69669 86206 21175 127446 7291 31158 149621 140717 -1 43493 68569 70586 124572 7764 39266 43699 150720 117786 129603 59160 124494 13825 68159 35550 17617 85324 92065 46522 156588 84150 26466 107383 85984 131017 109836 30987 145235 148426 17847 159062 155724 64036 120266 141839 35598 17813 90057 21629 145589 109165 135065 9496 155691 68433 84601 28706 95018 641 150229 144806 112954 155839 37702 85340 30078 90616 4237 26876 34172 75589 46741 106115 98688 9168 145930 122192 26149 159029 41730 1207 30244 88969 59809 103052 29097 95364 70148 7301 -1 -1 -1 -1 -1 122926 -1 6511 26548 -1 146318 75822 153942 35510 133809 126975 38177 26043 149404 55711 38471 50047 148981 138441 78376 47105 -1 96177 155301 90745 739 57974 35050 158584 147191 97543 103965 23759 150788 46179 107986 31390 58722 122079 112404 26472 -1 -1 119938 81767 17192 69053 90321 98984 37588 102484 136139 124180 1826 99180 158963 116277 32180 28227 33591 99765 141370 24976 145428 5350 13857 2542 51287 143961 151539 147013 132716 43929 7792 3502 124160 58504 65142 73401 99741 89232 22788 116631 106568 121645 54228 79385 54568 25200 133059 47831 156360 47593 145018 80838 66063 25107 32758 20586 67200 -1 58392 152995 111918 11848 49818 97278 -1 80361 -1 -1 -1 -1 -1 -1 115651 -1 122770 2244 22355 7585 115437 106921 139425 66360 153359 154005 132367 124628 131062 7776 156128 103371 -1 73783 65909 78817 153801 14469 76726 10629 45712 135530 18590 36865 -1 102270 114798 120813 53031 72550 88913 -1 130098 47198 85835 126871 87338 24978 11180 71492 -1 38113 82166 81898 103150 10447 105521 141636 45247 73825 68509 116160 9632 141840 47378 27099 31338 139941 84985 86645 158376 154615 80404 16533 115019 146507 19099 67115 86640 135662 47212 76219 56639 60587 22404 27878 64754 50160 5785 30558 96868 93982 110924 37442 151938 19645 32451 70906 54258 32067 150328 68080 -1 -1 135087 128262 101569 153401 125910 145055 123562 106104 69837 92216 67323 38806 156784 129232 81768 157433 65222 145990 121716 41034 20049 125211 124684 77793 107017 24455 59280 18105 10117 144522 9285 56779 156168 153340 146882 159696 70623 113346 127232 148711 87011 34250 105117 149072 21295 -1 93309 115694 155997 126432 -1 -1 -1 53496 15613 102727 104258 75029 32179 72178 157027 -1 84824 -1 90340 140221 64187 144206 122269 123290 1041 106425 38972 25645 61335 158480 154891 29330 143023 39096 -1 -1 -1 -1 140540 -1 -1 157184 106845 4077 38697 99164 76534 -1 2665 130981 75448 57835 95410 12027 68782 25034 44795 87487 44627 121829 47953 158594 22356 115013 -1 86328 90473 -1 30880 100246 11592 61405 -1 26209 7743 154202 45692 -1 153902 37404 -1 108544 -1 126818 126689 133345 8852 123928 146904 112667 49610 91580 -1 101673 933 -1 -1 -1 3362 28677 111942 2296 134773 136757 114936 74661 14086 1638 49864 102358 102022 143637 27141 45385 135464 93088 63958 40073 -1 105249 65159 35391 76858 46491 132248 -1 158521 2709 89507 8870 140728 5 139735 55640 82979 4483 52604 13702 48141 22529 138687 66853 54025 134156 152714 150076 111599 37682 126143 148196 63990 124694 34932 3749 17529 150030 115076 113259 7729 106811 65511 41961 26828 146338 128866 138877 44446 33837 115992 74628 88620 135266 58173 144112 107782 7631 49785 43810 110502 57832 22336 22462 27031 152834 87287 6549 4329 93586 48802 3011 29960 130901 144148 20505 -1 42880 100495 115944 69503 38766 -1 40162 15529 6021 102057 -1 -1 -1 57599 22859 -1 -1 150221 94683 -1 44514 65770 145526 -1 -1 -1 -1 52422 66060 74023 107070 57678 119216 93440 45591 29305 -1 -1 69168 93321 126768 155717 154726 -1 41264 135855 152483 -1 -1 -1 94771 8583 49013 -1 -1 -1 51708 47915 23130 70070 158201 117343 61813 7156 40831 103119 66773 82548 104603 128147 109982 147202 31808 137312 20379 44305 -1 117479 20140 81804 39477 109958 30047 85485 145667 79660 -1 21934 136788 -1 101344 108125 66655 112781 78436 -1 -1 15357 -1 88027 -1 127251 130873 147367 139871 147144 97425 114314 42481 7078 86893 98854 142466 98321 51445 -1 -1 -1 12720 55358 58922 95666 2038 9598 106673 144065 64819 105867 7338 96893 98895 79675 110836 139275 99452 124099 132417 155286 156103 33079 126512 19819 54310 4014 49768 3850 29660 152983 48670 25427 38155 111352 71732 122544 78669 138504 74271 45016 158373 35989 48244 136483 133275 76776 26504 2 67325 52643 31437 153636 15707 59774 18523 115569 2666 120188 22418 144091 46270 148731 14029 137349 17855 100790 136122 86429 63823 144885 124713 145986 17410 43231 36588 20021 107509 72373 74869 7300 95955 -1 108459 -1 -1 31201 58705 96070 38684 141725 128184 66103 11617 94230 57224 101011 90446 99604 120991 55130 88901 103775 95439 146908 454 33912 96452 12439 149734 23518 38014 116642 50725 106966 130543 53290 33239 83976 152811 89350 49519 36719 33441 36227 -1 18059 46091 100667 131538 4608 146236 57058 85923 104857 93069 72192 36159 120587 48707 100794 77357 115503 41137 126997 147432 145369 156591 -1 69747 53642 105260 73578 88967 25674 43846 92411 151090 132280 1854 21249 65067 126913 25282 92572 64055 -1 -1 -1 -1 28016 115655 120945 135992 49145 -1 64968 102849 48445 -1 -1 -1 -1 -1 156746 -1 134632 -1 84747 8189 -1 23929 18897 143377 -1 100530 -1 -1 -1 151686 99459 150638 79894 118157 83405 140561 96132 68184 115845 22096 112143 64980 130824 67353 31463 91230 116040 97458 69116 119872 124034 65468 84591 34263 95637 111874 67506 132822 83784 17249 113503 -1 112169 -1 147021 114131 -1 -1 140939 -1 19493 -1 77505 -1 65660 110280 94922 132844 13952 117800 -1 126081 138374 43000 -1 90393 53170 123496 143075 40422 156447 6204 32387 61416 -1 -1 -1 75308 22345 106655 -1 -1 11648 112990 -1 15469 157019 49771 139165 69258 49960 75903 28494 76399 143209 50248 104795 134955 115288 43333 71100 88350 152886 -1 107587 -1 18323 37635 111873 -1 -1 -1 96741 102900 83713 91733 69272 81035 56989 26368 101414 134572 96525 53426 25413 26824 97771 146027 32468 119338 56616 79791 30813 111141 28300 120037 45313 118501 39193 85888 128158 105755 4668 65773 139917 31766 24682 101422 120830 11913 42224 26463 20746 109060 52316 131625 11124 36656 101890 152487 136626 -1 89071 26659 115287 96068 343 -1 71596 127904 55359 23657 137248 78564 -1 -1 -1 4487 60055 130810 84589 137022 -1 98824 40757 19310 102269 117305 156944 158301 126865 141384 119987 123011 155756 146771 142532 96801 50382 122876 33892 -1 49203 149166 57408 153513 157845 74127 42922 102736 62469 60973 74481 147541 84075 119284 599 18848 145434 69723 73755 -1 1473 88144 145587 82055 92275 30109 63441 128094 24707 73289 36403 125705 154608 141759 -1 21973 78551 121333 120846 64201 82478 55096 82407 -1 132283 128020 560 15640 64003 41775 -1 99167 13509 156958 123779 133365 124460 93509 36168 33311 125514 22501 84952 5530 153315 90671 120042 131087 21737 14025 53207 4819 5322 147496 150675 139587 36231 7180 61417 96197 61937 152821 40214 57285 -1 16506 86115 9492 153384 44733 87570 44020 -1 12349 138059 81058 36445 43741 69891 704 79360 82240 88987 15307 90072 6622 113033 99652 120740 14287 1734 970 13470 103982 159068 12586 -1 -1 18408 51710 142386 -1 -1 -1 -1 -1 -1 120161 -1 112855 158889 -1 113264 71747 116220 143050 -1 -1 66839 -1 -1 49292 49952 31827 22666 23580 -1 -1 64809 -1 94417 150037 91169 159489 96925 148896 23648 55373 -1 -1 5307 69365 -1 -1 64021 90933 -1 85114 -1 7259 39081 87252 89234 87874 155807 132304 92151 -1 138807 145125 45037 7879 -1 51530 109288 114546 -1 130472 119692 19446 149028 27631 -1 117020 59049 25678 150153 -1 25484 113964 103172 108789 33034 40880 77388 75381 17640 -1 47583 -1 35513 106350 15036 46817 34051 108849 67114 120595 -1 -1 46947 -1 73534 121858 104370 111020 87727 34447 110970 53490 -1 -1 151288 -1 40129 96668 58758 86185 49223 120966 -1 -1 -1 150277 -1 11677 13977 -1 -1 -1 24676 107337 91164 150091 150521 55131 141517 66951 52170 149959 -1 -1 -1 67038 -1 158984 98723 6841 76564 40177 79558 -1 138756 32964 55305 54278 86675 105584 15022 82909 72060 125714 43269 138979 138994 4709 120391 11867 47531 -1 60808 13680 131088 38882 78937 119762 118107 20612 97528 109942 99050 410 28436 75670 64874 29820 148462 155424 128669 148631 66708 22307 73326 7610 122307 76398 122244 60044 80693 148384 56881 12594 -1 43363 -1 -1 152167 71126 -1 6578 53910 56707 66428 131995 8369 120074 110512 83496 19015 84258 95180 24869 25974 119114 60937 149697 56139 5795 79693 91308 5040 72151 13836 13428 16009 45764 146664 69802 89081 143827 40717 91491 81784 72252 20490 91266 813 130254 95901 90992 60521 62419 107747 87616 150716 123281 8456 63130 130610 107282 82641 93195 132426 81726 102037 79250 63287 97440 3220 64388 55090 8893 64516 89432 130863 79197 139777 -1 110147 152447 130563 90643 64838 36038 66196 158378 -1 62686 88150 76974 19220 49754 140137 81301 32988 101587 137327 143733 80284 137250 110598 152395 123444 158261 13361 131753 20491 49456 35909 152112 70980 146612 150895 146311 11356 81783 127665 1472 22097 62596 144252 133577 119261 58138...
There are 3 lines in the input
156383


 */